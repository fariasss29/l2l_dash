import {
  Box,
  Divider,
  Typography,
  Card,
  CardContent,
  Chip,
  Dialog,
  DialogTitle,
  DialogContent,
  IconButton,
  Paper,
  Stack,
  TextField,
  Button,
  Grid,
  Tooltip,
  Grow,
} from "@mui/material";
import { LocalizationProvider } from "@mui/x-date-pickers/LocalizationProvider";
import { AdapterDateFns } from "@mui/x-date-pickers/AdapterDateFns";
import { DatePicker } from "@mui/x-date-pickers/DatePicker";
import { ptBR } from "date-fns/locale";
import CloseIcon from "@mui/icons-material/Close";
import DeleteOutlineIcon from "@mui/icons-material/DeleteOutline";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import AccessTimeIcon from "@mui/icons-material/AccessTime";
import EngineeringIcon from "@mui/icons-material/Engineering";
import NotesIcon from "@mui/icons-material/Notes";
import CheckCircleOutlineIcon from "@mui/icons-material/CheckCircleOutline";
import WarningAmberIcon from "@mui/icons-material/WarningAmber";
import AssessmentIcon from "@mui/icons-material/Assessment";
import { useState, useMemo } from "react";
import { FaHelmetSafety } from "react-icons/fa6";
import { MdOutlineModelTraining } from "react-icons/md";
import { TbTruckDelivery } from "react-icons/tb";
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  Tooltip as RechartsTooltip,
  Legend,
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
} from "recharts";

// ===== Ano de referência dos dados mock =====
const CURRENT_YEAR = 2025;

// --- DADOS COMPLETOS ---
const fullDispatchData = [
  { id: 1, category: "Segurança", severity: "high", created: "2025-01-19 08:30:00", completed: "2025-01-19 12:00:00", description: "Vazamento de óleo hidráulico grave", dispatchtype: "HSE_Olhos_Abertos", technicians: [{ dispatchnumber: "97363" }] },
  { id: 2, category: "Segurança", severity: "medium", created: "2025-01-16 14:00:00", completed: null, description: "Falha no sensor de presença da prensa", dispatchtype: "Manut. Corretiva", technicians: [{ dispatchnumber: "97364" }] },
  { id: 3, category: "Segurança", severity: "low", created: "2025-01-10 10:00:00", completed: "2025-01-10 11:00:00", description: "Piso escorregadio próximo à máquina 3", dispatchtype: "Melhoria Contínua", technicians: [{ dispatchnumber: "97365" }] },
  { id: 4, category: "Qualidade", severity: "high", created: "2025-02-05 09:00:00", completed: "2025-02-05 15:30:00", description: "Lote de peças com defeito dimensional", dispatchtype: "Análise de Qualidade", technicians: [{ dispatchnumber: "97332" }] },
  { id: 5, category: "Qualidade", severity: "medium", created: "2025-02-15 11:20:00", completed: "2025-02-15 18:00:00", description: "Variação de cor no produto final", dispatchtype: "Ajuste de Processo", technicians: [{ dispatchnumber: "973325" }] },
  { id: 6, category: "Entrega", severity: "high", created: "2025-10-22 13:00:00", completed: null, description: "Máquina principal parada, risco de atraso", dispatchtype: "Manut. Emergencial", technicians: [{ dispatchnumber: "97363141" }] },
];

// --- Funções Auxiliares ---
const getMonthName = (monthNumber) => {
  const months = ['Janeiro','Fevereiro','Março','Abril','Maio','Junho','Julho','Agosto','Setembro','Outubro','Novembro','Dezembro'];
  return months[monthNumber - 1];
};

const getSeverityProps = (severity) => {
  switch (severity) {
    case 'high': return { label: 'Urgente', color: 'error', mainColor: '#d32f2f', lightColor: '#ffcdd2' };
    case 'medium': return { label: 'Atenção', color: 'warning', mainColor: '#ed6c02', lightColor: '#ffecb3' };
    case 'low': return { label: 'Normal', color: 'success', mainColor: '#2e7d32', lightColor: '#c8e6c9' };
    default: return { label: 'Indefinido', color: 'default', mainColor: '#616161', lightColor: '#f5f5f5' };
  }
};

const formatDate = (dateTimeString) => {
  if (!dateTimeString) return "Em aberto";
  const date = new Date(dateTimeString);
  return date.toLocaleDateString('pt-BR', { day: '2-digit', month: '2-digit', year: 'numeric' });
};

const formatTime = (dateTimeString) => {
  if (!dateTimeString) return "-";
  const date = new Date(dateTimeString);
  return date.toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
};

const getMonthOverallColor = (severities) => {
  if (severities.includes('high')) return 'error';
  if (severities.includes('medium')) return 'warning';
  if (severities.includes('low')) return 'success';
  return 'default';
};

const processDataForMonthChips = (category) => {
  const groupedByMonth = fullDispatchData
    .filter(d => d.category === category)
    .reduce((acc, curr) => {
      const month = new Date(curr.created).getMonth() + 1;
      if (!acc[month]) acc[month] = [];
      acc[month].push(curr.severity);
      return acc;
    }, {});

  return Array.from({ length: 12 }, (_, i) => i + 1).map(month => {
    const severities = groupedByMonth[month] || [];
    const monthColorName = getMonthOverallColor(severities);
    const colorMap = { error: '#EF5350', warning: '#FFCA28', success: '#66BB6A', default: '#B0BEC5' };
    return { month: getMonthName(month), color: colorMap[monthColorName], monthNumber: month };
  });
};

const CardTemplate = ({ title, monthsData, onClickMonth, icon }) => (
  <Card sx={{
    ml: 0.4, width: '33%', borderRadius: 4, bgcolor: '#fff', color: '#000', p: 2,
    boxShadow: '0 8px 32px rgba(0,0,0,0.15)',
    transition: 'transform 0.3s ease, box-shadow 0.3s ease',
    '&:hover': { transform: 'translateY(-5px)', boxShadow: '0 12px 40px rgba(0,0,0,0.2)' }
  }}>
    <CardContent sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}>
      <Typography variant="h5" sx={{ fontWeight: 'bold' }}>
        {title} <Box sx={{ display: 'inline-block', ml: 1 }}>{icon}</Box>
      </Typography>
      <Divider sx={{ my: 2, bgcolor: '#e0e0e0' }} />
      <Box sx={{ display: 'grid', gridTemplateColumns: 'repeat(3, 1fr)', gap: 2 }}>
      {monthsData.map((data, index) => (
        <Chip
          key={index}
          label={data.month}
          onClick={() => onClickMonth(data.monthNumber, data.month)}
          sx={{
            bgcolor: data.color, color: '#fff', fontWeight: 'bold', height: 60, fontSize: '1rem', borderRadius: '12px',
            transition: 'transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out',
            '&:hover': { transform: 'scale(1.05)', boxShadow: '0 4px 20px rgba(0,0,0,0.2)', bgcolor: data.color },
          }}
        />
      ))}
      </Box>
    </CardContent>
  </Card>
);

const renderChartsContent = () => {
  const performanceData = [
    { name: 'Semana 1', Eficiência: 85, Qualidade: 90, Segurança: 88 },
    { name: 'Semana 2', Eficiência: 80, Qualidade: 92, Segurança: 85 },
    { name: 'Semana 3', Eficiência: 90, Qualidade: 88, Segurança: 93 },
    { name: 'Semana 4', Eficiência: 82, Qualidade: 95, Segurança: 90 },
  ];

  const incidentsData = [
    { name: 'Segurança', value: 400 },
    { name: 'Qualidade', value: 300 },
    { name: 'Entrega', value: 300 },
  ];

  const PIE_COLORS = ['#d32f2f', '#ed6c02', '#2e7d32'];

  return (
    <Grid container spacing={4} sx={{ mt: 1 }}>
      <Grid item xs={12} md={6}>
        <Card sx={{ height: 400, borderRadius: 3, p: 2 }}>
          <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Performance Semanal</Typography>
          <Typography variant="body2" color="text.secondary">Eficiência, Qualidade e Segurança</Typography>
          <ResponsiveContainer width="100%" height="80%">
            <BarChart data={performanceData}>
              <XAxis dataKey="name" />
              <YAxis />
              <RechartsTooltip />
              <Legend />
              <Bar dataKey="Eficiência" fill="#2e7d32" />
              <Bar dataKey="Qualidade" fill="#ed6c02" />
              <Bar dataKey="Segurança" fill="#d32f2f" />
            </BarChart>
          </ResponsiveContainer>
        </Card>
      </Grid>

      <Grid item xs={12} md={6}>
        <Card sx={{ height: 400, borderRadius: 3, p: 2 }}>
          <Typography variant="h6" sx={{ fontWeight: 'bold' }}>Distribuição de Incidentes</Typography>
          <Typography variant="body2" color="text.secondary">Por categoria no mês</Typography>
          <ResponsiveContainer width="100%" height="80%">
            <PieChart>
              <Pie
                data={incidentsData}
                cx="50%"
                cy="50%"
                labelLine={false}
                outerRadius={120}
                fill="#8884d8"
                dataKey="value"
                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}
              >
                {incidentsData.map((entry, index) => (
                  <Cell key={`cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />
                ))}
              </Pie>
              <RechartsTooltip />
              <Legend />
            </PieChart>
          </ResponsiveContainer>
        </Card>
      </Grid>

      <Grid item xs={12} md={6}>
        <Grid container spacing={2}>
          <Grid item xs={12} sm={6}>
            <Card sx={{ borderRadius: 3, p: 2, height: '100%' }}>
              <Stack direction="row" justifyContent="space-between" alignItems="center">
                <Typography variant="subtitle1" color="text.secondary" fontWeight="bold">Total Dispatch Mensal</Typography>
                <AssessmentIcon sx={{ color: '#424242' }} />
              </Stack>
              <Typography variant="h4" fontWeight="bold" sx={{ mt: 1 }}>3.247</Typography>
              <Typography variant="body2" color="success.main">+15.2% vs. ano anterior</Typography>
            </Card>
          </Grid>

          <Grid item xs={12} sm={6}>
            <Card sx={{ borderRadius: 3, p: 2, height: '100%' }}>
              <Stack direction="row" justifyContent="space-between" alignItems="center">
                <Typography variant="subtitle1" color="text.secondary" fontWeight="bold">Taxa de Conclusão</Typography>
                <CheckCircleOutlineIcon sx={{ color: '#2e7d32' }} />
              </Stack>
              <Typography variant="h4" fontWeight="bold" sx={{ mt: 1 }}>89.4%</Typography>
              <Typography variant="body2" color="success.main">+3.1% vs. ano anterior</Typography>
            </Card>
          </Grid>

          <Grid item xs={12} sm={6}>
            <Card sx={{ borderRadius: 3, p: 2, height: '100%', borderLeft: '5px solid #d32f2f' }}>
              <Stack direction="row" justifyContent="space-between" alignItems="center">
                <Typography variant="subtitle1" color="text.secondary" fontWeight="bold">Críticas (Ano)</Typography>
                <WarningAmberIcon sx={{ color: '#d32f2f' }} />
              </Stack>
              <Typography variant="h4" fontWeight="bold" sx={{ mt: 1, color: '#d32f2f' }}>110</Typography>
              <Typography variant="body2" color="error.main">-18% vs. ano anterior</Typography>
            </Card>
          </Grid>
        </Grid>
      </Grid>
    </Grid>
  );
};

const getColorForStatus = (statusData) => {
  if (statusData.some((d) => d.severity === 'high')) return '#d32f2f';
  if (statusData.some((d) => d.severity === 'medium')) return '#ed6c02';
  if (statusData.some((d) => d.severity === 'low')) return '#2e7d32';
  return '#B0BEC5';
};

const getDaysInMonth = (month, year, category) => {
  const daysInMonth = new Date(year, month, 0).getDate();
  const days = Array.from({ length: daysInMonth }, (_, i) => i + 1);
  const categoryData = fullDispatchData.filter(d => d.category === category);

  return days.map(day => {
    const dayData = categoryData.filter(d =>
      new Date(d.created).getDate() === day && new Date(d.created).getMonth() + 1 === month
    );
    return {
      day,
      count: dayData.length,
      color: getColorForStatus(dayData),
    };
  });
};

// === Agora recebe onPickDate para navegar/filtrar ===
const renderCalendarContent = (modalData, onPickDate) => {
  const daysInSelectedMonth = getDaysInMonth(modalData.monthNumber, CURRENT_YEAR, modalData.category);

  return (
    <Grid container spacing={2}>
      {daysInSelectedMonth.map((dayData, index) => (
        <Grid item key={index} xs={2}>
          <Box
            sx={{
              position: 'relative',
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              cursor: 'pointer',
            }}
            onClick={() => onPickDate(dayData.day)}
          >
            <Chip
              label={dayData.day}
              sx={{
                width: 120,
                height: 85,
                borderRadius: '12px',
                bgcolor: dayData.color,
                color: '#fff',
                fontWeight: 'bold',
                fontSize: '1rem',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                transition: 'transform 0.2s ease',
                '&:hover': {
                  transform: 'scale(1.05)',
                  bgcolor: dayData.color,
                },
              }}
            />
            {dayData.count > 0 && (
              <Box
                sx={{
                  position: 'absolute',
                  bottom: -8,
                  right: -8,
                  minWidth: 20,
                  height: 20,
                  bgcolor: '#1a2734',
                  color: '#fff',
                  borderRadius: '50%',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  fontSize: '0.7rem',
                  fontWeight: 'bold',
                  border: '2px solid #fff',
                }}
              >
                {dayData.count}
              </Box>
            )}
          </Box>
        </Grid>
      ))}
    </Grid>
  );
};

export default function SQDCDashboard() {
  const [openModal, setOpenModal] = useState(false);
  const [modalData, setModalData] = useState({ category: '', monthName: '', monthNumber: null });
  const [selectedFilter, setSelectedFilter] = useState('todos');
  const [searchTerm, setSearchTerm] = useState('');
  const [filterDate, setFilterDate] = useState(null);
  const [activeModalTab, setActiveModalTab] = useState('Análise Executiva');

  const handleOpenModal = (category, monthNumber, monthName) => {
    setActiveModalTab('Análise Executiva');
    setModalData({ category, monthName, monthNumber });
    handleClearFilters();
    setOpenModal(true);
  };

  const handleCloseModal = () => setOpenModal(false);

  const handleClearFilters = () => {
    setSelectedFilter('todos');
    setSearchTerm('');
    setFilterDate(null);
  };

  // === Clicar no dia do calendário navega e filtra ===
  const handlePickDay = (day) => {
    const date = new Date(CURRENT_YEAR, (modalData.monthNumber ?? 1) - 1, day);
    setFilterDate(date);
    setSelectedFilter('todos');
    setSearchTerm('');
    setActiveModalTab('Análise Executiva');
  };

  const segurançaData = useMemo(() => processDataForMonthChips("Segurança"), []);
  const qualidadeData = useMemo(() => processDataForMonthChips("Qualidade"), []);
  const entregaData = useMemo(() => processDataForMonthChips("Entrega"), []);

  const filteredDispatches = useMemo(() => {
    if (!modalData.monthNumber) return [];

    return fullDispatchData
      .filter(d => {
        const dispatchDate = new Date(d.created);
        const dispatchMonth = dispatchDate.getMonth() + 1;
        const categoryMatch = d.category === modalData.category;
        const monthMatch = dispatchMonth === modalData.monthNumber;
        const statusMatch = selectedFilter === 'todos' || d.severity === selectedFilter;
        const searchMatch =
          searchTerm === '' ||
          d.description.toLowerCase().includes(searchTerm.toLowerCase()) ||
          d.dispatchtype.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (d.technicians[0]?.name || '').toLowerCase().includes(searchTerm.toLowerCase());
        const dateMatch =
          !filterDate ||
          dispatchDate.toLocaleDateString('pt-BR') === filterDate.toLocaleDateString('pt-BR');

        return categoryMatch && monthMatch && statusMatch && searchMatch && dateMatch;
      })
      .sort((a, b) => {
        const severityOrder = { high: 1, medium: 2, low: 3 };
        return severityOrder[a.severity] - severityOrder[b.severity];
      });
  }, [modalData, selectedFilter, searchTerm, filterDate]);

  return (
    <LocalizationProvider dateAdapter={AdapterDateFns} adapterLocale={ptBR}>
      <Box sx={{ flexGrow: 1, p: 4, backgroundColor: '#f4f6f8' }}>
        <Box sx={{ display: 'flex', gap: 4, flexWrap: 'wrap', mb: 4 }}>
          <CardTemplate title="Segurança" monthsData={segurançaData} onClickMonth={(m, n) => handleOpenModal("Segurança", m, n)} icon={<FaHelmetSafety size={18} />} />
          <CardTemplate title="Qualidade" monthsData={qualidadeData} onClickMonth={(m, n) => handleOpenModal("Qualidade", m, n)} icon={<MdOutlineModelTraining size={21} />} />
          <CardTemplate title="Entrega" monthsData={entregaData} onClickMonth={(m, n) => handleOpenModal("Entrega", m, n)} icon={<TbTruckDelivery size={20} />} />
        </Box>

        <Dialog
          open={openModal}
          onClose={handleCloseModal}
          fullWidth
          maxWidth="xl"
          PaperProps={{ sx: { borderRadius: 4, bgcolor: '#f9f9f9', height: '95vh' } }}
        >
          <DialogTitle sx={{ m: 0, p: 2, display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
            <Stack direction="row" spacing={1} alignItems="center">
              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                {modalData.category} | {modalData.monthName}
              </Typography>

              {/* Abas */}
              <Box sx={{ bgcolor: '#e0e0e0', p: 0.5, borderRadius: 5 }}>
                <Chip
                  label="Análise Executiva"
                  onClick={() => setActiveModalTab("Análise Executiva")}
                  sx={{ bgcolor: activeModalTab === "Análise Executiva" ? '#424242' : 'transparent', color: activeModalTab === "Análise Executiva" ? 'white' : 'text.primary', fontWeight: 'bold' }}
                />
                <Chip
                  label="Gráficos & KPIs"
                  onClick={() => setActiveModalTab("Gráficos & KPIs")}
                  sx={{ bgcolor: activeModalTab === "Gráficos & KPIs" ? '#424242' : 'transparent', color: activeModalTab === "Gráficos & KPIs" ? 'white' : 'text.primary', fontWeight: 'bold' }}
                />
                <Chip
                  label="Ações & Dispatch"
                  onClick={() => setActiveModalTab("Ações & Dispatch")}
                  sx={{ bgcolor: activeModalTab === "Ações & Dispatch" ? '#424242' : 'transparent', color: activeModalTab === "Ações & Dispatch" ? 'white' : 'text.primary', fontWeight: 'bold' }}
                />
              </Box>
            </Stack>

            <Stack direction="row" spacing={1} alignItems="center">
              {activeModalTab === 'Análise Executiva' && (
                <>
                  <Chip label="Todos" onClick={() => setSelectedFilter('todos')} variant={selectedFilter === 'todos' ? 'filled' : 'outlined'} sx={{ cursor: 'pointer' }} color="primary" />
                  <Chip label="Urgente" onClick={() => setSelectedFilter('high')} variant={selectedFilter === 'high' ? 'filled' : 'outlined'} sx={{ cursor: 'pointer' }} color="error" />
                  <Chip label="Atenção" onClick={() => setSelectedFilter('medium')} variant={selectedFilter === 'medium' ? 'filled' : 'outlined'} sx={{ cursor: 'pointer' }} color="warning" />
                  <Chip label="Normal" onClick={() => setSelectedFilter('low')} variant={selectedFilter === 'low' ? 'filled' : 'outlined'} sx={{ cursor: 'pointer' }} color="success" />
                </>
              )}
              <IconButton onClick={handleCloseModal} sx={{ color: (theme) => theme.palette.grey[500] }}>
                <CloseIcon />
              </IconButton>
            </Stack>
          </DialogTitle>

          <Divider sx={{ bgcolor: '#e0e0e0' }} />

          <DialogContent sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>
            {/* Aba Análise Executiva */}
            {activeModalTab === 'Análise Executiva' && (
              <>
                {/* Filtros */}
                <Stack direction="row" spacing={2} sx={{ mb: 2, flexShrink: 0 }} alignItems="center">
                  <TextField
                    fullWidth
                    variant="outlined"
                    size="small"
                    label="Pesquisar"
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    sx={{
                      '& .MuiInputBase-input': { fontSize: 13, py: 1 },
                      '& .MuiInputLabel-root': { fontSize: 13 },
                      '& input::placeholder': { fontSize: 13, opacity: 0.8 },
                      '& .MuiOutlinedInput-root': {
                        borderRadius: 2,
                        '& fieldset': { borderRadius: 3 },
                      },
                    }}
                  />

                  <DatePicker
                    label="Filtrar por data"
                    value={filterDate}
                    onChange={(newValue) => setFilterDate(newValue)}
                    enableAccessibleFieldDOMStructure={false}
                    slots={{ textField: TextField }}
                    slotProps={{
                      textField: {
                        size: 'small',
                        sx: {
                          minWidth: 180,
                          '& .MuiInputBase-input': { fontSize: 13, py: 1 },
                          '& .MuiInputLabel-root': { fontSize: 13 },
                          '& .MuiSvgIcon-root': { fontSize: 18, color: '#6b7280' },
                          '& .MuiOutlinedInput-root': {
                            borderRadius: 2,
                            overflow: 'hidden',
                            '& fieldset': { borderRadius: 3 },
                          },
                        },
                      },
                      popper: {
                        sx: { '& .MuiPaper-root': { borderRadius: 3, overflow: 'hidden' } },
                      },
                    }}
                  />

                  <Button
                    variant="outlined"
                    onClick={handleClearFilters}
                    color="inherit"
                    disableRipple
                    sx={{
                      borderRadius: 3,
                      borderColor: '#cfd8dc',
                      color: '#1f2937',
                      textTransform: 'uppercase',
                      fontSize: 12,
                      px: 1.5,
                      height: 36,
                      '&:hover': {
                        borderColor: '#90a4ae',
                        backgroundColor: '#eceff1',
                      },
                      '&:focus-visible': { outline: 'none' },
                    }}
                  >
                    LIMPAR
                  </Button>
                </Stack>

                {/* Lista com animação */}
                <Box sx={{ flexGrow: 1, overflowY: 'auto', p: 1 }}>
                  <Grid container spacing={3}>
                    {filteredDispatches.length > 0 ? (
                      filteredDispatches.map((dispatch, index) => {
                        const { label, color, mainColor, lightColor } = getSeverityProps(dispatch.severity);

                        const ENTER_MS   = 1100;  // duração da animação de entrada de cada card
                        const STAGGER_MS = 250;  // atraso incremental entre os cards (efeito cascata)
                        const BASE_DELAY = 0; 

                        return (
                          <Grid item xs={12} sm={6} md={4} key={dispatch.id}>
                            <Grow
                              appear
                              in={openModal && activeModalTab === 'Análise Executiva'}
                              mountOnEnter
                              unmountOnExit
                              timeout={{ appear: ENTER_MS, enter: ENTER_MS, exit: 200 }}
                              style={{ transitionDelay: `${BASE_DELAY + index * STAGGER_MS}ms` }}
                            >
                               <Card
                                sx={{
                                  height: '100%',
                                  borderRadius: 3,
                                  borderLeft: `5px solid ${mainColor}`,
                                  transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',
                                  '&:hover': { transform: 'scale(1.03)', boxShadow: 6 },
                                }}
                              >
                                <CardContent>
                                  <Stack direction="row" justifyContent="space-between" alignItems="flex-start">
                                    <Chip label={label} color={color} size="small" sx={{ fontWeight: 'bold' }} />
                                  </Stack>

                                  <Typography variant="h6" component="div" sx={{ mt: 1.5, mb: 1.5, fontWeight: '600' }}>
                                    {dispatch.description}
                                  </Typography>
                                  <Divider sx={{ my: 1 }} />
                                  <Stack spacing={1.5} sx={{ color: 'text.secondary' }}>
                                    <Stack direction="row" alignItems="center" spacing={1}>
                                      <Tooltip title="Técnico Responsável"><EngineeringIcon fontSize="small" /></Tooltip>
                                      <Typography variant="body2">{dispatch.technicians[0]?.dispatchnumber || 'N/A'}</Typography>
                                    </Stack>
                                    <Stack direction="row" alignItems="center" spacing={1}>
                                      <Tooltip title="Tipo de Dispatch"><NotesIcon fontSize="small" /></Tooltip>
                                      <Typography variant="body2">{dispatch.dispatchtype}</Typography>
                                    </Stack>
                                    <Stack direction="row" alignItems="center" spacing={1}>
                                      <Tooltip title="Data de Abertura"><CalendarTodayIcon fontSize="small" /></Tooltip>
                                      <Typography variant="body2">{formatDate(dispatch.created)}</Typography>
                                      <Tooltip title="Hora de Abertura"><AccessTimeIcon fontSize="small" /></Tooltip>
                                      <Typography variant="body2">{formatTime(dispatch.created)}</Typography>
                                    </Stack>
                                    <Stack direction="row" alignItems="center" spacing={1} sx={{ bgcolor: lightColor, p: 1, borderRadius: 1.5 }}>
                                      <Tooltip title="Data de Conclusão"><CalendarTodayIcon fontSize="small" sx={{ color: mainColor }} /></Tooltip>
                                      <Typography variant="body2" sx={{ fontWeight: '500', color: mainColor }}>{formatDate(dispatch.completed)}</Typography>
                                      <Tooltip title="Hora de Conclusão"><AccessTimeIcon fontSize="small" sx={{ color: mainColor }} /></Tooltip>
                                      <Typography variant="body2" sx={{ fontWeight: '500', color: mainColor }}>{formatTime(dispatch.completed)}</Typography>
                                    </Stack>
                                  </Stack>
                                </CardContent>
                              </Card>
                            </Grow>
                          </Grid>
                        );
                      })
                    ) : (
                      <Box sx={{ width: '100%', textAlign: 'center', mt: 10 }}>
                        <Typography variant="h6" color="text.secondary">
                          Nenhum item encontrado para os filtros selecionados.
                        </Typography>
                      </Box>
                    )}
                  </Grid>
                </Box>
              </>
            )}

            {/* Aba Gráficos & KPIs */}
            {activeModalTab === 'Gráficos & KPIs' && renderChartsContent()}

            {/* Aba Ações & Dispatch (Calendário) */}
            {activeModalTab === 'Ações & Dispatch' && (
              <Box sx={{ p: 4 }}>
                {renderCalendarContent(modalData, handlePickDay)}
              </Box>
            )}
          </DialogContent>
        </Dialog>
      </Box>
    </LocalizationProvider>
  );
}
